<div id="graph-container"></div>

<script>
  $(document).ready(function () {
    var gridName = '<%= name %>';
    if (gridName === 'Unsaved grid!' && localStorage.getItem('gridName')) {
      gridName = localStorage.getItem('gridName');
    } else {
      localStorage.setItem('gridName', gridName);
    }
    $('#grid-name').text(gridName);
    //generate-random-grid

    // LOGIC OF SIGMA JS
    var grid = <%- grid %>;
    var grids = <%- grids %>;

    var atlasSettings = {
      forceAtlas2Time: 5000,
      // Force atalas2 configuration
      forceAtlas2: {
        linLogMode: false,
        outboundAttractionDistribution: false,
        adjustSizes: false,
        edgeWeightInfluence: 0,
        scalingRatio: 1,
        strongGravityMode: false,
        gravity: 1,
        slowDown: 1,
        barnesHutOptimize: true,
        barnesHutTheta: 0.5,
        startingIterations: 1,
        iterationsPerRender: 1
      },
    };


    var i,
      s,
      N = 100,
      E = 500,
      filtered = {
        nodes: [],
        edges: []
      },
      g = {};

    // memory representation of graph, useful when resetting filtering

    if (grid.nodes && grid.edges && grid.nodes.length > 0) {
      g = {
        nodes: grid.nodes,
        edges: grid.edges
      };
    } else {
      g = JSON.parse(localStorage.getItem('grid'));
      if (!g) {
        g = {
          nodes: [],
          edges: []
        }
      }
    }

    /*
     * We are gonna use local storage to store g and also all other variable
    */
    localStorage.setItem('grid', JSON.stringify(g));

    // sigma.renderers.def = sigma.renderers.canvas
    // Instantiate sigma:
    s = new sigma({
      graph: g,
      renderer: {
        container: document.getElementById('graph-container'),
        type: 'canvas'
      },
      settings: {
        doubleClickEnabled: false,
        drawEdgeLabels: false,
        minEdgeSize: 0.5,
        maxEdgeSize: 4,
        minNodeSize: 0,
        maxNodeSize: 10,
        enableEdgeHovering: true,
        edgeHoverColor: 'edge',
        defaultEdgeHoverColor: '#000',
        edgeHoverSizeRatio: 1,
        edgeHoverExtremities: true,
        drawLabels: true,
        defaultEdgeType: 'tapered',

      },


    });




    s.bind('doubleClickNode rightClickNode', function (e) {
      showDetailModal(e.data.node);
    });


    // Initialize the dragNodes plugin:
    var dragListener = sigma.plugins.dragNodes(s, s.renderers[0]);

    dragListener.bind('startdrag', function (event) {

    });
    dragListener.bind('drag', function (event) {

    });
    dragListener.bind('drop', function (event) {

    });
    dragListener.bind('dragend', function (event) {

    });
    /*
         $('#graph-container').mousedown(function (event) {
           switch (event.which) {
             case 1:
               //alert('Left Mouse button pressed.');
               if (!$('#add-node').hasClass('dismiss')) {
                 $('#add-node').modal('show');
               }
               break;
             case 2:
               //alert('Middle Mouse button pressed.');
               break;
             case 3:
               //alert('Right Mouse button pressed.');
               break;
             default:
               alert('You have a strange Mouse!');
           }
         }); */
    var c = s.camera;
    // Zoom out - single frame :
    c.goTo({
      ratio: c.ratio * c.settings('zoomingRatio')
    });
    s.refresh();
    // s.startForceAtlas2(atlasSettings.forceAtlas2);
    //updateContainerDimensions();
    //window.dispatchEvent(new Event('resize'));

    // MODAL LOGIC
    $('#add-node').modal({
      show: false
    });

    $('#saveAlert').hide();

    $('#detail-node').modal({
      show: false
    });

    // LOGIC OF SELECTS
    //
    $('#strategies-select').show();
    $('#cobit-policies-select').hide();

    $('#goal-warning').show();
    $('#strategy-warning').hide();

    $("select").select2({
      dropdownCssClass: 'dropdown-inverse'
    });

    $('#filter').on("change", function (e) {
      //var cobit = <%- JSON.stringify(cobit) %>
      //console.log(e.val);
      filtered = {
        nodes: [],
        edges: []
      }
      filterItems(e.val);
    });

    $('#goal-objective-select').on('change', function () {
      if (this.value === '0') {
        $('#strategies-select').parent().show();
        $('#cobit-policies-select').parent().hide();
        $('#node-type').val('objective');
        $('#goal-warning').show();
        $('#strategy-warning').hide();
        $('#strategies-select-label').show();
        $('#percentage-form-group').hide();
        $('#cobit-policies-select-label').hide();

      } else if (this.value === '1') {
        $('#strategies-select').parent().hide();
        $('#cobit-policies-select').parent().show();
        $('#node-type').val('strategy');
        $('#goal-warning').hide();
        $('#strategy-warning').show();
        $('#strategies-select-label').hide();
        $('#percentage-form-group').show();
        $('#cobit-policies-select-label').show();
      }
      $("select").select2({
        dropdownCssClass: 'dropdown-inverse'
      });
    });

    // INTERCEPT FORM SUBMIT

    $("#submit-form").click(function () {
      $("#add-node").submit();
    });

    $('#treemap-delete-button').click(function () {
      //$('#node-label-input').val($('#node-name').text());
      //$('#grid-name-input').val($('#grid-name').text());
      //$("#delete-node").submit();
      g.edges = deleteEdges($('#node-name').text());
      g.nodes = deleteNode($('#node-name').text());
      localStorage.setItem('grid', JSON.stringify(g));
      s.graph.clear();
      s.graph.read({
        nodes: g.nodes,
        edges: g.edges
      });

      s.refresh();
      s.startForceAtlas2(atlasSettings.forceAtlas2);

    });

    $("#treemap-form-button").click(function () {
      // close modal
      //alert('here we save our current node');
      $('#graph').remove();
      $('<input>').attr({
        type: 'hidden',
        id: 'graph',
        name: 'graph',
        value: g
      }).appendTo('#node-detail');
      $("#node-detail").submit();
    });

    function isNodeName(element) {
      return element.name && element.name == 'name';
    }

    function isNodeDesc(element) {
      return element.name && element.name == 'description';
    }

    function isNodePercentage(element) {
      return element.name && element.name == 'percentage';
    }

    function isCategory(element) {
      return element.name == 'cobit-policies-select';
    }

    function isObjective(element) {
      return element.name == 'type' && element.value == 'objective';
    }

    function isStrategy(element) {
      return element.name == 'type' && element.value == 'strategy';
    }

    function isStrategyNode(element) {
      return element.nodeType == 'strategy';
    }

    function isTarget(element) {
      return element.name == 'strategies-select';
    }

    function deleteNode(nodeToDeleteName) {
      return g.nodes.filter(function (el) {
        return el.label != nodeToDeleteName;
      });
    }

    function deleteEdges(nodeToDeleteName) {
      /* First we search by the id of the node to delete name */
      var nodeId = '';
      var node = g.nodes.filter(function (el) {
        return el.label === nodeToDeleteName;
      })[0];
      if (node) {
        nodeId = node.id;
        return g.edges.filter(function (edge) {
          return edge.source != nodeId && edge.target != nodeId;
        });
      } else {
        return g.edges;
      }

    }

    function showDetailModal(node) {
      $('#node-name').text(node.label);
      $('#node-detail-name').val(node.label);
      $('#node-description').text(node.description);
      $('#node-detail-description').val(node.description);
      $('#node-type h5').text('Objective');
      if (node.nodeType === 'strategy') {
        $('#strategy-section').show();
        $('#node-type h5').text('Strategy');
        $('#category-detail-modal').text(node.category);
        $('#node-detail-category').val(node.category);
        $('#percentage-detail-modal').text(node.percentage);
        $('#node-detail-percentage').val(node.percentage);
        $('#treemap-form-button').show();

      } else {
        $('#strategy-section').hide();
        $('#treemap-form-button').hide();
      }
      $('#add-node').modal('hide');
      $('#save-grid').modal('hide');
      $('#load-grid').modal('hide');
      $('#detail-node').modal('show');
    }

    // FILTERING
    // query is in array with elements to filter
    function filterItems(query) {

      if (query.length == 0) {
        filtered = JSON.parse(JSON.stringify(g));
      }
      // case of strategy nodes
      query.forEach(function (element) {
        filteredNodes = g.nodes.filter(function (el) {
          return el.category.toLowerCase().indexOf(element.toLowerCase()) > -1;
        });
        if (filteredNodes.length > 0) {
          filteredNodes.forEach(function (strategyNode) {
            filtered.nodes.push(strategyNode);
            // case of edges
            // if the source_id and target_id are present in filtered.nodes, we
            // add that edge to filtered.edges
            var target_id = strategyNode.id;
            var filteredEdges = g.edges.filter(function (edge) {
              return edge.target == target_id;
            });
            if (filteredEdges.length > 0) {
              // we must add the edge and the objective (if they are not already present ) to the array
              filteredEdges.forEach(function (edge) {
                filtered.edges.push(edge);
                // case of objective nodes
                // We grab the objective nodes
                // of each added edge and we add them to the filtered.nodes
                var source_id = edge.source;
                // we search the node with this id and add it.
                var objective_node = g.nodes.find(function (el) {
                  return el.id == source_id;
                });
                filtered.nodes.push(objective_node);
              });
            }
          });
        }
      });
      s.graph.clear();
      s.graph.read({
        nodes: filtered.nodes,
        edges: filtered.edges
      });




      s.refresh();
      s.startForceAtlas2(atlasSettings.forceAtlas2);
      //      return fruits.filter(function (el) {
      //        return el.toLowerCase().indexOf(query.toLowerCase()) > -1;
      //      });
    }


    $("#add-node").submit(function (e) {
      e.preventDefault();
      var form = $('#node').serializeArray();
      // we add a node
      console.log(form);
      $('#detail-node').modal('hide');
      $('#add-node').modal('hide');
      $('#save-grid').modal('hide');
      $('#load-grid').modal('hide');
      // IF it's a strategy, we add the node
      var nodeType = 'objective';
      var color = '#dd409a'; // Goal color
      var name = form.find(isNodeName).value;
      var desc = form.find(isNodeDesc).value;
      var percentage = form.find(isNodePercentage).value || '0';
      var category = ''; // When adding strategy, we need to save which is its parent category
      var size = 6;
      if (form.find(isStrategy) != null) {
        nodeType = 'strategy';
        color = '#1f3592';
        category = form.find(isCategory).value;
        size = 4;
      }
      var genericId = 'node_' + Date.now();
      var x = (Math.random() * 1) + 1;
      var y = (Math.random() * 1) + 1;
      var params = {
        id: genericId,
        label: name,
        category: category,
        nodeType: nodeType,
        description: desc,
        percentage: percentage,
        x: x,
        y: y,
        size: size,
        color: color
      };
      var c = s.camera;
      // Zoom out - single frame :
      c.goTo({
        ratio: c.ratio * c.settings('zoomingRatio')
      });
      //x = Math.random();
      //y = Math.random();

      g.nodes.push(params);
      localStorage.setItem('grid', JSON.stringify(g));
      s.graph.addNode(params);
      if (form.find(isObjective) != null) {
        // if is a objective we add an edge between the selected strategies
        // and the new objective node
        var target_ids = form.filter(isTarget).map((x) => x.value);
        target_ids.forEach(function (target_id) {
          var source_id = genericId;
          params = {
            id: 'e_' + source_id + '_' + target_id,
            source: source_id,
            target: target_id,
            size: 2,
            color: '#ccc'
          };
          g.edges.push(params);
          localStorage.setItem('grid', JSON.stringify(g));
          s.graph.addEdge(params);
        });

      }

      s.refresh();
      s.startForceAtlas2(atlasSettings.forceAtlas2);
    });

    //GENERATE RANDOM GRID
    $("#generate-random-grid").click(function () {
      // Generate a random graph:
      for (i = 0; i < N; i++)
        g.nodes.push({
          id: 'n' + i,
          label: 'Node ' + i,
          x: Math.random(),
          y: Math.random(),
          size: Math.random(),
          color: '#666'
        });

      for (i = 0; i < E; i++)
        g.edges.push({
          id: 'e' + i,
          source: 'n' + (Math.random() * N | 0),
          target: 'n' + (Math.random() * N | 0),
          size: Math.random(),
          color: '#ccc'
        });
      s.graph.read({
        nodes: g.nodes,
        edges: g.edges
      });

      s.refresh();
      s.startForceAtlas2(atlasSettings.forceAtlas2);
    });
    //DELETE GRID
    $("#delete-grid").click(function () {
      g.nodes = [];
      g.edges = [];
      localStorage.setItem('grid', JSON.stringify(g));
      s.graph.clear();

      s.refresh();
      s.startForceAtlas2(atlasSettings.forceAtlas2);
    });

    // LOAD NODE MODA POPUP
    // SAVE NODE MODAL POPUP
    $("#load-grid-btn").click(function () {
      grids.forEach(function (element) {
        console.log(element);
        var newOption = new Option(element.grid.properties.name, element.grid.properties.name, true, true);
        $("#grids-select").append(newOption).trigger('change');
      });
      $('#add-node').modal('hide');
      $('#detail-node').modal('hide');
      $('#save-grid').modal('hide');
      $('#load-grid').modal('show');
    });


    // SAVE NODE MODAL POPUP
    $("#save-grid-btn").click(function () {
      var nodes = 0;
      var edges = 0;
      var html = '<ul>';
      if (grids.length > 0) {
        grids.forEach(function (element) {
          //nodes = element.grid.nodes ? element.grid.nodes.length : 0;
          //edges = element.grid.edges ? element.grid.edges.length : 0;
          html = html + '<li>' + element.grid.properties.name + '</li>';
        });
        html = html + '</ul>';
      } else {
        html = '<span>No grids saved yet for this user!</span>'
      }
      $('#savedGridsList').html(html);
      $('#add-node').modal('hide');
      $('#detail-node').modal('hide');
      $('#save-grid').modal('show');
      $('#load-grid').modal('hide');

      /*     $.ajax({
             type: 'POST',
             url: '/grid',
             data: { graph: g },
             success: function (resultData) {
               alert(resultData);
             }
           }); */
    });

    //SAVE GRID FORM BUTTON

    $("#save-grid-form-btn").click(function () {
      if (!$("#savedGridNameTextBox").val()) {
        $('#saveAlert').show();
      } else {
        $('#saveAlert').hide();
        $("#grid-form-input").val(JSON.stringify(g));
        $("#save-graph-form").submit();
      }

    });


    $("#load-grid-form-btn").click(function () {
      $("#load-graph-form").submit();
    });


    // ADD NODE MODAL POPUP
    $("#add-node-button").click(function () {
      // we first update the strategies based in the strategies node
      var strategies = g.nodes.filter(isStrategyNode);
      if (strategies != null) {
        $('#strategies-select').html('').select2({
          dropdownCssClass: 'dropdown-inverse'
        });
        strategies.forEach(function (element) {
          console.log(element);
          var newOption = new Option(element.label, element.id, true, true);
          $("#strategies-select").append(newOption).trigger('change');
        });
        // Select the option with a value of 'Objective'
        //  $('#goal-objective-select').val('0').trigger('change');
        $('#goal-objective-select').val('0').trigger('change.select2');

        $('#strategies-select').parent().show();
        $('#cobit-policies-select').parent().hide();
        $('#node-type').val('objective');
        $('#goal-warning').show();
        $('#strategy-warning').hide();
        $('#strategies-select-label').show();
        $('#percentage-form-group').hide();
        $('#cobit-policies-select-label').hide();
        $("select").select2({
          dropdownCssClass: 'dropdown-inverse'
        });
      }

      $('#add-node').modal('show');
      $('#detail-node').modal('hide');
      $('#save-grid').modal('hide');
      $('#load-grid').modal('hide');
    });

  });

</script>